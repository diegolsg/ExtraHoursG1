// <auto-generated />
using System;
using ExtraHours.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExtraHours.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250707030535_InitialCrete")]
    partial class InitialCrete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExtraHours.Core.Models.ExtraHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExtraHours");
                });

            modelBuilder.Entity("ExtraHours.Core.Models.ExtraHourType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EndExtraHour")
                        .HasColumnType("interval");

                    b.Property<string>("Porcentaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartExtraHour")
                        .HasColumnType("interval");

                    b.Property<string>("TypeHourName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ExtraHourTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndExtraHour = new TimeSpan(0, 21, 0, 0, 0),
                            Porcentaje = "25%",
                            StartExtraHour = new TimeSpan(0, 6, 0, 0, 0),
                            TypeHourName = "Diurna",
                            Updated = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndExtraHour = new TimeSpan(0, 6, 0, 0, 0),
                            Porcentaje = "75%",
                            StartExtraHour = new TimeSpan(0, 21, 0, 0, 0),
                            TypeHourName = "Nocturna",
                            Updated = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndExtraHour = new TimeSpan(0, 21, 0, 0, 0),
                            Porcentaje = "100%",
                            StartExtraHour = new TimeSpan(0, 6, 0, 0, 0),
                            TypeHourName = "Dominical/Festiva Diurna",
                            Updated = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndExtraHour = new TimeSpan(0, 6, 0, 0, 0),
                            Porcentaje = "150%",
                            StartExtraHour = new TimeSpan(0, 21, 0, 0, 0),
                            TypeHourName = "Dominical/Festiva Nocturna",
                            Updated = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ExtraHours.Core.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ExtraHours.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Empleado"
                        });
                });

            modelBuilder.Entity("ExtraHours.Core.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ExtraHours.Core.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LimitExtraHoursDay")
                        .HasColumnType("integer");

                    b.Property<int>("LimitExtraHoursWeek")
                        .HasColumnType("integer");

                    b.Property<int>("TotalHoursWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LimitExtraHoursDay = 2,
                            LimitExtraHoursWeek = 12,
                            TotalHoursWeek = 46,
                            Updated = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ExtraHours.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExtraHours.Core.Models.ExtraHour", b =>
                {
                    b.HasOne("ExtraHours.Core.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExtraHours.Core.Models.RolePermission", b =>
                {
                    b.HasOne("ExtraHours.Core.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtraHours.Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
